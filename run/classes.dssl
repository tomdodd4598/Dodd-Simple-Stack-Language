# ----------------- #
# COUNTER CONTAINER #
# ----------------- #

/Container {
	/__init__ {
		/this exch def
		/this .counter 0 def
		this
		"Made a Container!" println
	} macro
	
	/increment {
		/this exch def
		/this .counter ++
		"Counter: " this .counter ~ println
	} macro
} class

/cont Container new def

5 {
	cont .increment
} repeat

/cont .shout { "Hello!" println } macro
cont .shout

'\n' print

# ---------------- #
# LINKED LIST ITEM #
# ---------------- #

/Item {
	/__init__ {
		/this exch def
		/this .value exch def
		/this .next null def
		this
	} macro
	
	/addNext {
		/curr exch def
		/prev null def
		{
			/prev curr =
			/curr curr .next =
			curr null == { break } if
		} loop
		/prev .next exch Item new =
	} macro
	
	/printGetNext {
		/item exch def
		item .value print
		item .next dup null == { '\n' } { ", " } ifelse print
	} macro
	
	/printList {
		/item exch def
		{
			/item item .printGetNext =
			item null == { break } if
		} loop
	} macro
	
	/printRecursive {
		.printGetNext /next exch def
		next null != {
			next .printRecursive
		} if
	} macro
} class

/item "First" Item new def
"Second" item .addNext
"Third" item .addNext
item .printList
item .printRecursive

'\n' print

# ------------------- #
# DIAMOND INHERITANCE #
# ------------------- #

/Person {
	/talk {
		type " talked." ~ println
	} macro
} class

/Worker Person {
	/work {
		type " worked." ~ println
	} macro
} class

/Miner Worker {
	/mine {
		type " mined." ~ println
	} macro
} class

/Programmer Worker {
	/code {
		type " coded." ~ println
	} macro
} class

/Satoshi Miner Programmer { } class

/satoshi Satoshi new def
satoshi .talk
satoshi .work
satoshi .mine
satoshi .code

'\n' print

/instance {
	/clazz exch def
	/value exch def
	value " is " ~ value clazz is ! { "not " ~ } if "an instance of " ~ clazz ~ println
} macro

satoshi Satoshi instance
satoshi Miner instance
satoshi Programmer instance
satoshi Worker instance
satoshi Person instance
