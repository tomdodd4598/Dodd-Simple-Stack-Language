# ----------------- #
# COUNTER CONTAINER #
# ----------------- #

/Container {
	/init {
		/this exch def
		/this .counter 0 def
		this
		"Made a Container!" println
	} magic
	
	/increment {
		/this exch def
		/this .counter ++
		"Counter: " this .counter ~ println
	} macro
} class

/cont Container new def

5 {
	cont .increment
} repeat

/cont .shout { "Hello!" println } macro
cont .shout

'\n' print

# ---------------- #
# LINKED LIST ITEM #
# ---------------- #

/Item {
	/init {
		/this exch def
		/this .value exch def
		/this .next null def
		this
	} magic
	
	/addNext {
		/curr exch def
		/prev null def
		{
			/prev curr =
			/curr curr .next =
			curr null == { break } if
		} loop
		/prev .next exch Item new =
	} macro
	
	/printGetNext {
		/item exch def
		item .value print
		item .next dup null == { '\n' } { ", " } ifelse print
	} macro
	
	/printList {
		/item exch def
		{
			/item item .printGetNext =
			item null == { break } if
		} loop
	} macro
	
	/printRecursive {
		.printGetNext /next exch def
		next null != {
			next .printRecursive
		} if
	} macro
} class

/item "First" Item new def
"Second" item .addNext
"Third" item .addNext
item .printList
item .printRecursive

'\n' print

# -------------- #
# COMPLEX NUMBER #
# -------------- #

/Complex {
	/init {
		/this exch def
		/this .im exch def
		/this .re exch def
		this
	} magic
	
	/i 0.0 1.0 Complex new def
	
	/binOpSetup "dup .re /xre exch def .im /xim exch def dup .re /yre exch def .im /yim exch def" def
	
	/add {
		Complex .binOpSetup interpret
		xre yre + xim yim + Complex new
	} magic
	
	/sub {
		Complex .binOpSetup interpret
		xre yre - xim yim - Complex new
	} magic
	
	/mul {
		Complex .binOpSetup interpret
		xre yre * xim yim * - xre yim * xim yre * + Complex new
	} magic
	
	/div {
		Complex .binOpSetup interpret
		/ysq yre yre * yim yim * + def
		xre yre * xim yim * + ysq / xim yre * xre yim * - ysq / Complex new
	} magic
	
	/toString {
		/this exch def
		this .re string
		this .im 0.0 >= { '+' ~ } if
		this .im string ~ 'i' ~
	} macro
} class

/a 2.3 3.4 Complex new def
/b 6.2 -1.9 Complex new def

a Complex .toString println
b .toString println

'\n' print

"a+b = " print a b + .toString println
"a-b = " print a b - .toString println
"a*b = " print a b * .toString println
"a/b = " print a b / .toString println

'\n' print

# ------------------- #
# DIAMOND INHERITANCE #
# ------------------- #

/Person {
	/talk {
		"Person talked." println
	} macro
} class

/Worker Person {
	/work {
		"Worker worked." println
	} macro
} class

/Miner Worker {
	/talk {
		"Miner talked." println
	} macro
	
	/mine {
		"Miner mined." println
	} macro
} class

/Programmer Worker {
	/work {
		"Programmer worked." println
	} macro
	
	/code {
		"Programmer coded." println
	} macro
} class

/Satoshi Miner Programmer { } class

/satoshi Satoshi new def
satoshi .talk
satoshi .work
satoshi .mine
satoshi .code
